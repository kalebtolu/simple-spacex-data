{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","components/NoMatch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_browser_umd","query","loading","error","data","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","NoMatch","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.386d3c92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ab10d000.png\";","import React from 'react'\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n      <div className=\"col-md-9\">\n      <h4>Mission: <span className={classNames({\n          'text-success': launch_success,\n          'text-danger': !launch_success\n      })}>\n      { mission_name} \n      </span></h4>\n      <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n      </div>\n      <div className=\"col-col-md-3\">\n      <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\"> Launch Details</Link>\n      </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n    <p>\n        <span className=\"px-3 mr-2 bg-success\"/> Success\n    </p>\n    <p>\n        <span className=\"px-3 mr-2 bg-danger\"/> Fail\n    </p>\n      \n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY  = gql`\n    query LaunchQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n\n`\n\nexport default class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className =\"display-4 my-3\">Launches </h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n            {\n                ({ loading, error, data }) => {\n                    if(loading) return <h4>Loading</h4>\n                    if(error) return <h4>{error}</h4>\n                    \n                    return (\n                        <Fragment>\n                            {\n                                data.launches.map( launch => (\n                                    <LaunchItem  key={launch.flight_number} launch={launch}/>\n                                ))\n                            }\n                        </Fragment>\n                    )\n                }\n            }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql `\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number){\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n\n        }\n    }\n\n`\n\nexport default class Launch extends Component {\n  render() {\n      let { flight_number } = this.props.match.params;\n      flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n        {\n                ({ loading, error, data }) => {\n                    if(loading) return <h4>Loading</h4>\n                    if(error) return <h4>{error}</h4>\n                    const { mission_name, flight_number, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch;\n                    return <div>\n                        <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission: </span> {  mission_name }</h1>\n                        <h4 className=\"mb-3\">Launch Details</h4>\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\"> Flight Number: {flight_number}</li>\n                            <li className=\"list-group-item\"> Launch Year: {launch_year}</li>\n                            <li className=\"list-group-item\"> Launch Successful: <span className={classNames({\n                                    'text-success': launch_success,\n                                    'text-danger': !launch_success\n                                })}>{launch_success ? 'Yes' : 'No'}</span></li>\n                        </ul>\n\n\n                        <h4 className=\"my-col-3\">Rocket Details</h4>\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\">Rocket ID: {rocket_id}</li> \n                            <li className=\"list-group-item\">Rocket Name: {rocket_name}</li> \n                            <li className=\"list-group-item\">Rocket Type: {rocket_type}</li> \n                        </ul>\n                        <hr />\n                        <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n\n                    </div>\n                }\n            }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n","import React from 'react'\n\nexport default function NoMatch() {\n  return (\n    <div className=\"card card-body mb-3\">\n      <h3 className=\"text-center\">This is a 404 page</h3>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from  'react-apollo';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport NoMatch from './components/NoMatch';\nimport logo from './logo.png';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n        <img src={logo} alt=\"SpaceX\" style={{ width: 300, display: 'block', margin: 'auto'}} />\n          <Switch>\n            <Route exact path=\"/\" component={Launches} />\n            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n            <Route  component={NoMatch}/>\n          </Switch>\n        </div>\n      </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}